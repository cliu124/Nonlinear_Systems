clear all;
close all;

%Estimate region of attraction for
%dx_1=x_2
%dx_2=x_1+(x_1^2-1)x_2

A=[0,-1;
    1,-1];

%Then we have 
%dx=A*x+B*u; where B=[0;1], and u=x_1^2*x_2. 
%We use the property that x_1^2*x_2\leq \delta^2*x_2 within a local region
%|x|^2\leq \delta^2.
%Thus we have u^2\leq \delta^4* (K*x)^T*(K*x) and K=[0,1];

%We try to find Lyapunov function V=x^T*P*x, and let \dot{V}\leq 0 within a
%local region |x|^2\leq \delta^2 using s-procedure, such that 
%\dot{V}+s*(\delta^4* (K*x)^T*(K*x) -u^2)\leq 0
%As normal, we require V is positive definite, and without loss of
%generality, we can require P>=I. 

P=sdpvar(2,2); %weighting matrix for Lyapunov function
s=sdpvar(1,1); %s is a non-negative value to enforce that dV is negative semidefinite in a local region
delta4=sdpvar(1,1); %delta^4 going to be optimized

I=eye(2,2); %identify matrix
B=[0;1]; % write nonlinear system as dx=A*x+B*u;

%-----------------------bound 1 of forcing term
K1=[0,1]; % bound this forcing term such that u^2\leq \delta^4* (K*x)^T*(K*x)

dV_constraint=[A'*P+P*A+s*delta4*K1'*K1, P*B;
    B'*P, -s];
constraint=[P>=I, dV_constraint<=0, s>=0];
sdp_option=sdpsettings('solver','sedumi'); %This solver can be modified as mosek (https://www.mosek.com/), and using edu email, you can get a free license. 
bisection(constraint, -delta4, sdp_option); %negative sign means maximize delta4. 

deltaf=value(delta4)^(1/4)*sqrt(min(eig(value(P)))/max(eig(value(P))));


%---------------------bound 2 of forcin
