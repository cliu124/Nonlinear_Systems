function [A,B,Q,Z] = pqzschur(A,B)% PQZSCHUR  Periodic Schur decomposition.%    [AA,BB,Q,Z] = PQZSCHUR(A,B) for n-by-n-by-k arrays A and B%    produces n-by-n-by-k arrays AA, BB, QQ, ZZ so that AA(:,:,1:k)%    and BB(:,:,1:k) are upper triangular, Q(:,:,1:k) and Z(:,:,1:k)%    are unitary, and%%            A(:,:,1) = Q(:,:,1) * AA(:,:,1) * Z(:,:,k)',%            B(:,:,1) = Q(:,:,1) * BB(:,:,1) * Z(:,:,1)',%            A(:,:,2) = Q(:,:,2) * AA(:,:,2) * Z(:,:,1)',%            B(:,:,2) = Q(:,:,2) * BB(:,:,2) * Z(:,:,2)',%                    ...%            A(:,:,k) = Q(:,:,k) * AA(:,:,k) * Z(:,:,k-1)',%            B(:,:,k) = Q(:,:,k) * BB(:,:,k) * Z(:,:,k)'.%%    Comments are highly appreciated.%    kressner@math.tu-berlin.de% Check inputsif nargin ~= 2,   error('Two input arguments required.');end[m,n,k] = size(A);if ( m~=n ),   error('A must n-by-n-by-k');endif ( k <= 0),   error('k must be greater than zero');end[mB,nB,kB] = size(B);if ( mB~=n | nB~=n | kB ~= k ),   error('B must n-by-n-by-k');end   % merge A and BAB = complex(zeros(n,n,2*k));s  = zeros(2*k,1);for i = 1:k,   AB(:,:,i*2-1) = A(:,:,k-i+1);   s(i*2-1) = 1;   AB(:,:,i*2) = B(:,:,mod(k-i-1,k)+1);   s(i*2) = -1;endif isreal(AB),   AB = complex(AB);end% do computationsQZ = complex(zeros(n,n,2*k));if nargout > 2,   [QZ(:),AB(:)] = percomplex(2,AB,s);else  % [AB(:)] = percomplex(2,AB,s);   [AB(:)] = percomplex(2,AB,s);end% split AB and QZfor i = 1:k,   A(:,:,k-i+1) = AB(:,:,i*2-1);   B(:,:,mod(k-i-1,k)+1) = AB(:,:,i*2);endif nargout > 2,   Q = complex(zeros(n,n,k));   Z = complex(zeros(n,n,k));   for i = 1:k,      Q(:,:,k-i+1) = QZ(:,:,i*2-1);      Z(:,:,mod(k-i-1,k)+1) = QZ(:,:,i*2);   endend